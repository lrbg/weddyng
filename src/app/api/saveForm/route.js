export async function POST(req) {
    try {
        const body = await req.json();
        const { telefono, confirmed, acompanantesConfirmados } = body;

        // Validar que se proporcion√≥ un n√∫mero de tel√©fono
        if (!telefono) {
            return new Response(
                JSON.stringify({ success: false, message: '‚ùå Debes proporcionar un n√∫mero de tel√©fono v√°lido.' }),
                { status: 400 }
            );
        }

        // Normalizar el n√∫mero de tel√©fono
        const numeroLimpio = limpiarNumero(telefono);
        if (!numeroLimpio) {
            return new Response(
                JSON.stringify({ success: false, message: '‚ùå El n√∫mero de tel√©fono proporcionado no es v√°lido.' }),
                { status: 400 }
            );
        }

        console.log(`üìå Buscando n√∫mero normalizado: ${numeroLimpio}`);

        // Cargar la lista de invitados
        const invitados = cargarInvitados();

        // Verificar si el n√∫mero est√° en la lista de invitados
        if (!invitados[numeroLimpio] || !invitados[numeroLimpio].principal) {
            return new Response(
                JSON.stringify({ success: false, message: '‚ùå N√∫mero no registrado. Verifica tu invitaci√≥n.' }),
                { status: 400 }
            );
        }

        const { principal, acompanantes } = invitados[numeroLimpio];

        // Guardar el registro de confirmaci√≥n
        guardarRegistro(numeroLimpio, principal.nombre, confirmed, acompanantesConfirmados);

        // Mensaje de confirmaci√≥n
        const message = `üöÄ Confirmaci√≥n de asistencia:\nüë§ Invitado: ${principal.nombre}\nüìû Tel√©fono: ${telefono}\nüéü Lugares asignados: ${principal.lugares}\n${acompanantes.length > 0 ? `üë• Acompa√±antes: ${acompanantes.map(a => a.nombre).join(', ')}\n` : ''}${confirmed ? '‚úÖ ¬°Nos vemos en la boda!' : '‚ùå Lamentamos que no puedas asistir.'}`;

        return new Response(
            JSON.stringify({
                success: true,
                message: message,
                lugares: principal.lugares,
                acompanantes: acompanantes.map(a => ({ nombre: a.nombre, codigo: a.codigo })),
            }),
            { status: 200 }
        );

    } catch (error) {
        console.error('‚ùå Error en el servidor:', error);
        return new Response(
            JSON.stringify({ success: false, message: '‚ùå Error en el servidor. Intenta nuevamente.' }),
            { status: 500 }
        );
    }
}